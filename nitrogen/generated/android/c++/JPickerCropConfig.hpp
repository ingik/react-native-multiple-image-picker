///
/// JPickerCropConfig.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "PickerCropConfig.hpp"

#include "CropRatio.hpp"
#include "JCropRatio.hpp"
#include <optional>
#include <string>
#include <vector>

namespace margelo::nitro::multipleimagepicker {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "PickerCropConfig" and the the Kotlin data class "PickerCropConfig".
   */
  struct JPickerCropConfig final: public jni::JavaClass<JPickerCropConfig> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/multipleimagepicker/PickerCropConfig;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct PickerCropConfig by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    PickerCropConfig toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldCircle = clazz->getField<jni::JBoolean>("circle");
      jni::local_ref<jni::JBoolean> circle = this->getFieldValue(fieldCircle);
      static const auto fieldRatio = clazz->getField<jni::JArrayClass<JCropRatio>>("ratio");
      jni::local_ref<jni::JArrayClass<JCropRatio>> ratio = this->getFieldValue(fieldRatio);
      static const auto fieldDefaultRatio = clazz->getField<JCropRatio>("defaultRatio");
      jni::local_ref<JCropRatio> defaultRatio = this->getFieldValue(fieldDefaultRatio);
      static const auto fieldFreeStyle = clazz->getField<jni::JBoolean>("freeStyle");
      jni::local_ref<jni::JBoolean> freeStyle = this->getFieldValue(fieldFreeStyle);
      static const auto fieldIsSquare = clazz->getField<jni::JBoolean>("isSquare");
      jni::local_ref<jni::JBoolean> isSquare = this->getFieldValue(fieldIsSquare);
      return PickerCropConfig(
        circle != nullptr ? std::make_optional(static_cast<bool>(circle->value())) : std::nullopt,
        [&]() {
          size_t __size = ratio->size();
          std::vector<CropRatio> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = ratio->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }(),
        defaultRatio != nullptr ? std::make_optional(defaultRatio->toCpp()) : std::nullopt,
        freeStyle != nullptr ? std::make_optional(static_cast<bool>(freeStyle->value())) : std::nullopt,
        isSquare != nullptr ? std::make_optional(static_cast<bool>(isSquare->value())) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JPickerCropConfig::javaobject> fromCpp(const PickerCropConfig& value) {
      return newInstance(
        value.circle.has_value() ? jni::JBoolean::valueOf(value.circle.value()) : nullptr,
        [&]() {
          size_t __size = value.ratio.size();
          jni::local_ref<jni::JArrayClass<JCropRatio>> __array = jni::JArrayClass<JCropRatio>::newArray(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            const auto& __element = value.ratio[__i];
            __array->setElement(__i, *JCropRatio::fromCpp(__element));
          }
          return __array;
        }(),
        value.defaultRatio.has_value() ? JCropRatio::fromCpp(value.defaultRatio.value()) : nullptr,
        value.freeStyle.has_value() ? jni::JBoolean::valueOf(value.freeStyle.value()) : nullptr,
        value.isSquare.has_value() ? jni::JBoolean::valueOf(value.isSquare.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::multipleimagepicker
